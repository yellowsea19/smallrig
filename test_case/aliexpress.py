import time
from decimal import Decimal, ROUND_HALF_UP
import pandas as pd
import pymysql,requests
import unittest
from datetime import datetime
import pymongo
from pymongo import MongoClient
import json
import math
from jsonpath import jsonpath
from bson import ObjectId

from pull_order import pull_order,pull_rma_order,pull_order_fee,pull_order_return_fee

class TestMongoDB(unittest.TestCase):
    def setUp(self,env='uat'):
        self.env = env
        if self.env == 'test':
            self.client = MongoClient(
                "mongodb://smallrig:smallrig@192.168.133.223:27017/?authMechanism=SCRAM-SHA-1&authSource=smallrig&directConnection=true")
            self.db = self.client['smallrig']

            self.urls = 'http://192.168.133.223:5555'
            self.xxl_url = 'http://192.168.133.223:19010'
            self.connection = pymysql.connect(host='192.168.133.213',  # 数据库地址
                                              user='root',  # 数据库用户名
                                              password='root',  # 数据库密码
                                              db='smallrig-platform',
                                              cursorclass = pymysql.cursors.DictCursor)  # 数据库名称
            self.cursor = self.connection.cursor()
        elif self.env == 'uat':
            self.client = MongoClient(
                "mongodb://smallrig:smallrig@192.168.133.233:27017/?authMechanism=DEFAULT&authSource=admin")
            self.db = self.client['smallrig']
            self.urls = 'https://bereal.smallrig.net'
            self.xxl_url = 'http://192.168.133.232:19010'
            self.connection = pymysql.connect(host='192.168.133.233',  # 数据库地址
                                              user='root',  # 数据库用户名
                                              password='Leqi!2022',  # 数据库密码
                                              db='smallrig-platform',
                                              cursorclass = pymysql.cursors.DictCursor)  # 数据库名称
            self.cursor = self.connection.cursor()

    def tearDown(self):
        self.cursor.connection.close()
        self.client.close()  # 关闭 MongoDB 连接

    def query(self, sql):
        self.cursor.execute(sql)
        return self.cursor.fetchall()

    def insert(self, sql):
        try:
            res = self.cursor.execute(sql)
            print(res)
            self.connection.commit()
            return True
        except Exception as e:
            self.connection.rollback()
            return False

    def delete(self, sql):
        return self.insert(sql)

    def update(self, sql):
        return self.insert(sql)

    def test_connection(self):
        self.assertIsNotNone(self.db)

    def handle_objectid(self,data):
        """递归转换 MongoDB 数据，将所有 ObjectId 转化为字符串"""
        if isinstance(data, dict):
            for key, value in data.items():
                data[key] = self.handle_objectid(value)
        elif isinstance(data, list):
            for index, item in enumerate(data):
                data[index] = self.handle_objectid(item)
        elif isinstance(data, ObjectId):
            return str(data)
        return data



    def test_pull_rma_to_order(self,platformId=45,platform_rma_code='14250703537440482'):
        """
        清洗RMA单--
        根据退货退款单号，找到订单号，清洗订单号，然后若退货退款单号存在，则先删再清洗
        """
        db_list = ["return_order_struct"]
        for db in db_list:
            print(
                "-----------------------------------------" + db + "----------------------------------------------" + "\n")
            collection = self.db[db]
            query = {
                     "platformId": platformId,
                     "orderId":f'{platform_rma_code}',
                     "finishFlag": True
                     }

            results = collection.find(query).sort('insertTime', pymongo.DESCENDING)
            try:
                #取出最新的一条RMA数据
                k = next(results)
                print("退货退款单号： ",k['orderId'],"----",k['_id'])

                #获取订单号
                if platformId == 59:
                    order_db = "tiktok_order_struct"
                    source_code  = jsonpath (k,'$.order.order_id')[0]
                elif platformId == 34:
                    order_db = "shopee_order_struct"
                    source_code = jsonpath(k, '$.order.order_sn')[0]
                elif platformId == 39:
                    order_db = "lazada_order_struct"
                    source_code = jsonpath(k, '$.order.trade_order_id')[0]
                elif platformId == 45:
                    order_db ="aliexpress_order_struct"
                    source_code = jsonpath(k,'$.order.parent_order_id')[0]
                print("平台订单号： ",source_code)
            except KeyboardInterrupt:
                print("mongo中无该退货退款单数据 ： ",platform_rma_code)
            except StopIteration:
                print("mongo中无该退货退款单数据 ： ", platform_rma_code)

            try:
                #清洗订单数据
                order_query = {"orderId":f'{source_code}',
                                "finishFlag": True}
                collection_order = self.db[order_db]
                order_result = collection_order.find(order_query).sort('insertTime', pymongo.DESCENDING)
                order_id = next(order_result)['_id']

                print(order_id)
                pull_order(env=self.env,id=order_id,platformId=platformId)
                time.sleep(3)
                del_rma_order_sql = 'delete from t_rma_order where platform_rma_code = "%s"'%platform_rma_code
                self.delete(del_rma_order_sql)
                pull_rma_order(env=self.env,id=k['_id'],platformId=platformId)
            except UnboundLocalError:
                print("mongo 中没有订单数据的版本，订单号： ",source_code)
            except StopIteration :
                print("mongo 中没有订单数据的版本，订单号： ", source_code)




    def test_init_aliexpress(self,platformId = 45, platform_rma_code_list = ['6349190306107393']):
        """
                清洗RMA单--
                根据退货退款单号，找到订单号，清洗订单号，然后若退货退款单号存在，则先删再清洗

                """
        out_data_list = []
        for platform_rma_code in platform_rma_code_list :
            db_list = ["return_order_struct"]
            for db in db_list:
                print(
                    "-----------------------------------------" + db + "----------------------------------------------" + "\n")
                collection = self.db[db]
                query = {
                    "platformId": platformId,
                    "orderId": f'{platform_rma_code}',
                    "finishFlag": True
                }

                results = collection.find(query).sort('insertTime', pymongo.DESCENDING)
                try:
                    # 取出最新的一条RMA数据
                    k = next(results)
                    print("退货退款单号： ", k['orderId'], "----", k['_id'])

                    # 获取订单号

                    order_db = "aliexpress_order_struct"
                    source_code = jsonpath(k, '$.order.parent_order_id')[0]
                    print("平台订单号： ", source_code)
                except KeyboardInterrupt:
                    print("mongo中无该退货退款单数据 ： ", platform_rma_code)
                except StopIteration:
                    print("mongo中无该退货退款单数据 ： ", platform_rma_code)

                try:

                    order_query = {"orderId": f'{source_code}',
                                   "finishFlag": True}
                    collection_order = self.db[order_db]
                    order_result = collection_order.find(order_query).sort('insertTime', pymongo.DESCENDING)
                    order_info = next(order_result)
                    order_id =order_info['_id']

                    # 清洗订单数据 & 售后单
                    pull_order(env=self.env, id=order_id, platformId=platformId)
                    time.sleep(1)
                    #把订单改成已发货
                    update_order_status_sql = "update t_order_base set order_status = 4 where source_code = '%s'"%order_info['orderId']
                    self.update(update_order_status_sql)
                    #若退货退款单已存在，则删除重新清洗
                    del_rma_order_sql = 'delete from t_rma_order where platform_rma_code = "%s"' % platform_rma_code
                    self.delete(del_rma_order_sql)
                    pull_rma_order(env=self.env, id=k['_id'], platformId=platformId)


                    print(order_id)
                    receiveStatus = jsonpath(order_info,'$.orderFee.target.logisticInfoList[*].receiveStatus')
                    # if len(receiveStatus) != 1:
                    #     raise KeyError("logisticInfoList 有多个值")
                    receiveStatus_list = receiveStatus
                    receiveStatus_list = set(receiveStatus_list)
                    receiveStatus_list = list(receiveStatus_list)
                    if len(receiveStatus_list) == 1:
                        receiveStatus = receiveStatus[0]
                        print("receiveStatus : ",receiveStatus)
                    else:
                        receiveStatus = "not_received"
                    #查询数据库rma_type的值
                    mysql_result_rma_type_sql = "select rma_type from t_rma_order where platform_rma_code = '%s'" % platform_rma_code
                    result = self.query(mysql_result_rma_type_sql)
                    for i in result:
                        result_rma_type = i['rma_type']
                    #查询数据库return_type 的值
                    mysql_result_return_type_sql = "select return_type from t_rma_order_return where rma_id =  (select id from t_rma_order where platform_rma_code = '%s')" % platform_rma_code
                    result = self.query(mysql_result_return_type_sql)
                    for i in result:
                        result_return_type = i['return_type']

                    #refund_type查询数据库 的值
                    mysql_result_refund_type = "select refund_type from t_rma_order_refund where rma_code =  (select rma_code from t_rma_order where platform_rma_code = '%s')" % platform_rma_code
                    result = self.query(mysql_result_refund_type)
                    for i in result:
                        result_refund_type = i['refund_type']


                    if receiveStatus == "received":
                        buyer_return_logistics_company = jsonpath(k,'$.orderDetail.aliexpress_issue_detail_get_response.result_object.buyer_return_logistics_company')
                        print("buyer_return_logistics_company ： ",buyer_return_logistics_company)
                        if buyer_return_logistics_company :
                            print("RMA类型: 退货 & 退款")
                            print("退款类型：已发货退货退款")
                            print("退货类型: 客户退件")
                            try:
                                #RMA类型
                                self.assertEqual (result_rma_type,6)
                                #退款类型
                                self.assertEqual(result_refund_type,1)
                                #退货类型 1 物流退件  2 客户退件
                                self.assertEqual (result_return_type,2)
                                out_data = {"channel":order_info['channelKey'],"platform_rma_code": platform_rma_code, "source_code":  str(source_code),
                                            "RMA类型": "退货 & 退款", "退款类型": "已发货退货退款",
                                            "退货类型": "客户退件",
                                            "receiveStatus": receiveStatus_list,
                                            "buyer_return_logistics_company": buyer_return_logistics_company
                                            }
                                print(out_data)

                            except AssertionError:
                                print("请手动确认结果")
                                out_data = {"channel":order_info['channelKey'],"platform_rma_code": platform_rma_code, "source_code":  str(source_code),
                                            "RMA类型": "退货 & 退款", "退款类型": "已发货退货退款", "退货类型": "客户退件",
                                            "receiveStatus": receiveStatus_list,
                                            "buyer_return_logistics_company": buyer_return_logistics_company,
                                            "备注": "请手动确认结果"
                                            }


                        else:
                            print("RMA类型: 退款")
                            print("退款类型：已发货仅退款")
                            try:
                                # RMA类型
                                self.assertEqual(result_rma_type, 4)
                                # 退款类型
                                self.assertEqual(result_refund_type, 12)
                                out_data = {"channel":order_info['channelKey'],"platform_rma_code": platform_rma_code, "source_code":  str(source_code),
                                            "RMA类型": "退款", "退款类型": "已发货仅退款","receiveStatus":receiveStatus_list,"buyer_return_logistics_company":buyer_return_logistics_company
                                            }
                            except AssertionError:
                                print("请手动确认结果")
                                out_data = {"channel":order_info['channelKey'],"platform_rma_code": platform_rma_code, "source_code":  str(source_code),
                                            "RMA类型": "退款", "退款类型": "已发货仅退款",
                                            "receiveStatus": receiveStatus_list,
                                            "buyer_return_logistics_company": buyer_return_logistics_company,
                                            "备注": "请手动确认结果"
                                            }

                    else:
                        print("RMA类型: 退货 & 退款")
                        print("退款类型：已发货退货退款")
                        print("退货类型: 物流退件")
                        try:
                            # RMA类型 6 退货 & 退款
                            self.assertEqual(result_rma_type, 6)
                            # 退款类型
                            self.assertEqual(result_refund_type, 1)
                            # 退货类型 1 物流退件  2 客户退件
                            self.assertEqual(result_return_type, 1)
                            out_data = {"channel":order_info['channelKey'],"platform_rma_code": platform_rma_code, "source_code": str(source_code),
                                        "RMA类型": "退货 & 退款", "退款类型": "已发货退货退款", "退货类型": "物流退件",
                                        "receiveStatus": str(receiveStatus_list),

                                        }
                        except AssertionError:
                            print("请手动确认结果")

                            out_data = {"channel":order_info['channelKey'],"platform_rma_code": platform_rma_code, "source_code":  str(source_code),"RMA类型": "退货 & 退款", "退款类型": "已发货退货退款",
                                        "退货类型": "物流退件","receiveStatus":str(receiveStatus_list),"备注":"请手动确认结果"}
                    out_data_list.append(out_data)


                except UnboundLocalError:
                    print("mongo 中没有订单数据的版本，订单号： ", source_code)
                except StopIteration:
                    print("mongo 中没有订单数据的版本，订单号： ", source_code)

        # 创建 DataFrame
        df = pd.DataFrame(out_data_list)
        # 输出到 Excel 文件
        excel_file = r'C:\Users\huanghai\Downloads\rma_aliexpress.xlsx'
        df.to_excel(excel_file, index=False)
        print(f"rma_aliexpress数据已成功输出到 {excel_file}")


    def test_0120_init(self):
        platform_rma_code_list = ["14254622419675709","14254387759654401","6352179548435062","6352775389393212","6352775792993212","14254350535965831","6352738951193047","14254440329424349","6352468299198153","6352469098485086","8224246149885789","6352456648635368","6218215345784194","6220807231881273","14254388713357175","6352696944444835","14254373092678681","14254507213167226","6352070336200726","6352588832200726","6352069199700726","6352676526527283","14254237716676254","14254229789955916","6352555288427606","6352357432227606","6352556009927606","6352037133725868","6352035532105171","6352552868205171","6218152179007323","14254438408319252","14254429233498616","6352616571509451","6352615351707091","6352615352907091","14254182964364356","6218124690660578","14254158504557226","6218117803293401","6351987938944326","6352485640830443","6352578986530443","6351971979930443","6352485650630443","6352277821730443","14254224772953155","6352436445034616","6352523384253464","6352522557879081","6218199940265377","6218090521164844","14254162285754515","14254152399049494","14254034551486080","8224214123398477","6352393207265415","6352445773445449","6352352895055432","6352353265755432","6218057727546109","14253993768991044","8224050373713713","6351835975773543","6351834303287222","14254212027066450","6220631683363484","6352103812524021","6218021731007323","6218127515065324","6218018925868263","6352350560654254","8224299424414558","14254102442210823","14253920707925270","8224027949331884","6220560848301361","6352212529125501","14253809926315454","14253801950674195","14253935275706583","14253755571021545","14253685779986413","6351541597045101","6352130170846985","6351511506864885","6351796699572950","6220488471870725","8224057288247810","8224013962147810","6351962018868433","6352050911954503","6351923682736267","8224049654614558","14253771283398614","8224046837936766","14253552230595875","6351627826344557","8224158951211083","8224002712299751","14253472728265766","14253404947824321","14253423006249571","8223997580014558","6351512684020253","14253323322547545","14253369173184136","14253375855289524","14253364711589524","6217840711999902","14253321176500809","6217731789381273","6217815172498191","14253315058826494","6351751352625388","6351107578137464","14253255575586167","14253183726249331","14253261495323527","14253241981923527","14253406886026590","8224135758431884","6351067599205199","6351707389394947","6351565239816346","14253225094484685","6351542491657678","6351294619340479","6217638669783856","6217735995499723","6351488400907044","8223972308781424","14253266081197255","6351580574136944","6217604258039721","6217604215841151","14253041988376835","6217615720546109","14252994141231655","14253044602721545","8223996825792089","8223996438192089","6220188002385063","14253170854882466","6350862751262450","6351380438073596","6350858321337885","14253163681996298","6350843594110462","6217566664078864","6220168404478864","8224105796392089","14252957572002095","6217569353207323","14252886990872367","6351442106844490","14252847705490564","6217539307295927","6217523441866799","6217528113565543","6351243692853464","8224088982236766","14252972046073073","14252971285173073","6350992674524211","6217494168407064","6220077248007064","6220077646507064","6220076470807064","6217561536763944","6217561536663944","6351268188346982","8224186637402273","6217448283435086","8224078596313316","6217438912021358","8224180279654116","6350587995364434","14252840429081091","14252811649628183","6217404544731964","6217404118895712","6217499196046109","6351130523704937","6350500329225388","6350993238772950","6350491547172950","6350994003072950","14252570667017332","14252557064441947","14252597956782466","6217469121696470","6350766273939365","6350469511839365","6217459528787621","14252486939982466","6350989786219596","6350666603024900","6350961784824891","6219911651884826","6350957323272779","6350954184945265","6217401553950021","6350342799437178","6217396331689016","8224147010006827","6350936511058536","6350631809261418","6219886051172702","6350325189677789","6217297321238439","14252354292484762","6350764887224980","6350577077742467","6350739248764976","14252421610365766","6350213960341150","14252236122670095","14252235753770095","14252245031504243","6219823699625700","14252217425029580","6350488259709956","6217216671918307","6217217827618307","14252197302703485","6350776952865539","6350631233586385","6350433466779095","6217182635681273","14252154321478076","6350099987736265","6350700571782922","6350387085116686","6217151435056448","6217136666709536","6217164968886561","8223875557453234","6217223146292899","6219729206786999","14252035594626494","14252029175279218","14252013924189787","14251949700480351","6217194346446109","14252112445139725","14252112445039725","14251935353589787","14251935353689787","6217125780822898","14251922594453311","14251940681753959","14252087203498435","14252073666938948","6350395206186776","14251843306032235","14251866674931735","6217079370230138","6350344875138966","14251800106952074","14251798934365810","6350124237579918","14251818267903949","6350425385212010","6350415767861641","6350404577272678","14251781971389787","6217104346877238","8223846383621123","6217001008805662","14251731183126335","6217081904926031","6350009405293868","6217008583344764","6216994999354776","6217041584841604","6349676781825403","14251774413415052","6350150020925921","6350252588007767","6350141202041478","6349942271158536","6350235750004186","14251729649882619","6350234122867634","6219534812137069","14251576309202913","14251488592089787","14251516239845550","6216912934331539","6349510743904288","6350115360204288","6350115360404288","6349799466378674","6219461610946109","14251531205694646","6216931160746109","6216833898446109","6350079749607824","6349953616960081","14251364654157153","6216847355913801","6219416448872921","6349696679483702","6219398441075067","14251249336067395","6349682603850439","14251245376239486","6349674247185853","6349674234185853","6349348354880048","14251252761276005","14251214948551859","14251214948651859","14251214948751859","14251214948451859","14251237923989787","6349823647285853","6349302799885853","6216740211227020","6349577425033989","6216826329846320","6216712269685199","6349190306107393","6349496601147247","8223802800529152","14251026983732063","6216695039661541","6349489461967169","8223776757776243","8223769597619379","6216657489350071","6216698531369601","6349626418369481","6349086755364891","14250971921934568","14250908528211436","14250916338187115","14250917932287115","14251039627708577","14250886635570683","6219230026050021","6349364695785190","6349578572290402","6349579330790402","6349579329190402","14250769533322457","14250698141751859","14250853623896408","14250843660841947","6349173006535566","6349348833435566","6348838368335566","14250597334042704","14250611168818427","14250582660051859","14250582660151859","6349264087001716","6349325745543646","6348680719717792","6349169295312517","6216452568975751","6216452186175751","6349268915447115","6349203707284565","14250311842084848","6349002442208677","6348498311308677","6348498326308677","6348833831608677","6348832299208677","6348833075808677","14250233323518427","6349113712986731","6348959601102443","14250364465451859","6348938068127416","6349047365543666","14250276817095975","14250233695744562","14250036193331263","14250034993785259","6216267421024913","6348805226607753","14250028714774481","6348589870565289","14249991529442186","6348218703165289","6348548645627624","14249860648450478","6348593207108463","6348735780008463","6348591675859096","6348590469107513","6348730990888483","6348531641726574","14249847274735383","6216192371326889","6348502026696832","14249815222194968","6347955978346760","14249808407880018","14249593726480018","6347893562564413","8223648039357956","14249587206091839","6347691997252197","8223849410583691","6348119282215776","6215885426171893","6215913356723296","6347571586996832","6348128193675059","6347970889704288","6348114162304288","14249226885119439","14249226866919439","6218402489573021","8223714185129254","14248971302457463","8223706146255266","14248840579847000","14249011690985259","6347613824423712","6347740038902026","6347612211383959","6347886980976564","14248801133631382","6347521034005481","14248632237849959","6347510445967634","14248726095611993","6347326657551486","6347280630851486","14248306913062391","14248315485606045","14248287423329366","14248218186599635","6347158087507703","6346671927733290","8223460813546552","6347073668212010","6346947492450316","14248091410954580","6347000028545781","6346511569762421","6346499900812010","6215381184104715","6215306630104715","6217870085604715","6217854886267058","14248043227129331","6346878069040168","6346397917612010","8223401139759730","14247844754152170","6346643862951316","6346643487251316","14247760700366419","14247727194888581","14247812416488581","6346768529843280","6346748573212010","14247682850536234","14247573091111079","14247656047011079","6346680539506617","6346037954151486","8223377232501018","6346313891811176","8223594603624266","14247429588929246","8223333155745498","14247389895749959","6346335212762421","14247346349014838","6217551600643163","6346364942575845","14247028996620560","6346057218951486","14247084894941842","6345503967433970","14246892179783814","6345926065151316","6345371910951316","6345372722351316","6346048920587684","6346001747099778","8223489470235325","6345640231127867","14246613725843329","6345899329908677","6345747658343100","6345868567535220","6345591407074538","14246616758814566","8223225615573820","8223351769622835","8223452279822835","14246292953145331","6345425279421815","6345220267631426","14246211432773910","14246153315873910","14246122320025657","8223414203372336","6344695930785190","6345378989928418","6214431077627329","6345047007977349","6345013006287447","14245807764777162","14245795772405312","14245934463673910","14245935241073910","14245841211726376","14245807274548319","6344344791926164","6344325542506699","6344745484515593","6344218308249220","14245486922750303","14245486922650303","14245466536222854","6344702005742395","6344517630533907","6344504870794354","14245357610695679","6344345861646276","6344584508544825","14245151391964565","6344450985611375","8223029678964747","6214144306609573","14245022613816304","8223029943267222","6344158114684849","6213966528351629","8223158143625907","14244840896072633","14244702722382913","8222989967205004","6343993752633528","6343267574031353","6343992556331353","6343992185231353","8223199016986463","8223195012108353","6343784529326366","14244305087050848","8222938313746889","6213786397585531","6216181267805704","6343362409297817","6343356405938966","6343187401738966","14243908920865599","6342500386104415","14243889603437487","6342908664386171","6343174568786171","6343031279188970","6343128113814264","6342950477583623","6213441497023352","6342945781921199","6342216352721199","6342946184451205","6342216779451205","6342905762036854","6342168786769433","6342794475835824","14243437408370913","6342721298283970","14243415610521839","8222965757805817","6342735328246371","6213290663805704","14243212627987621","6342511248606164","6342510872106164","6341877907409426","6342315434886171","14243095935450303","6341814731886171","14242847190985410","6342191293539279","14242786909365599","6342158129116652","6341794609696286","6341942452020960","14242689220165599","8222892933895251","6341261579522963","6341978193046232","6341948163319905","6341948191819905","8222729953590112","6341157151714264","14241927147246680","6340676390544358","6341317324069784","6340583960869784","6340561988466336","14241896245081824","14241946415491844","6341113762467462","6340978487967462","6340977639367462","6340832601567462","6340369160167462","6341113376567462","6341113707667462","14241776879965238","6340832428939541","6212528606661286","6340653442602492","6340595477605133","8222610718742699","6340105997166190","8222750995101826","8222750918875455","6340608811021636","6340608009644786","14241167588533378","6339769174334776","8222794249504120","6214825242961286","6212301868461286","6340364161326835","6340266088126835","6340364180826835","14241034252362391","6340083414046951","14240937227478189","6340057781526639","6339292303077427","6339675863407593","6339652211541991","6339832472341991","6339650243109660","14240655815567530","6339742048378831","6339772510640297","6339459477527797","6339622804975894","6339695778210663","6339651760519364","6339368671018844","6339272676438038","6338781116908727","6211994596195326","6338681105578682","6339375741978682","6338680358478682","6339145078978682","6338679538467634","6339104655425986","6339105402425986","6338639123325986","8222450001848651","6339261326559794","14240121248919645","6339070168747034","6338249986382325","6338663079525986","6338791308766336","6338791707266336","6338518698351496","6338736523860366","6338481413364325","14239606733428841","6338604935865271","6211606635463603","6338584943107984","6338489206431604","6338550992605563","6337758760731949","8222367277023343","6211517418920721","8222508568846028","14239291654685150","6337974220095581","6338157705527399","6337969276577427","6337806280077427","6337760628894529","6337886498686171","6337258777304500","6337597062433475","14238935925918555","6337501079321171","8222525836646028","8222465364346028","6336922310741991","6337604179756036","6337573348163273","6337480146225441","14238650338394475","14238649675687217","6337449741008380","6337193044269433","6337167494259794","6337306816005739","6336642738444517","6337325345366200","6337249278421171","8222485045378215","6337085644124861","6337029608290890","6336867045490890","6336867048190890","6336867033790890","6332497915930443","6333067428118074","6209812610049794","6333318721149965","6332974309768925","6333757857149965","6332497916130443","6335678869745707","6333724930164741","6332497916230443","6332385126368925","6332497916030443","6333413418568925","8221915618725176","6333067017718074","6333490838468925","6333301239504229","6333623022280037","6210681328733633","6333750768329541","6333133403941705","14234806306605227","6336063788241822","6213189232933633","8222005957137380","6335863423408256","8222424676432892","6335827034341822","8222363481226759","6334789943166190","6333163671718074","6336337782324265","8222163117583666","6333490826968925","6212311295149794","6210689856433633","6333623406580037","6333317939949965","6335051776066029","6333758233349965","6334992343578682","6333819820013897","6333547119112235","6335121191173565","6334522121255351","6210175964634768","6210175964434768","6335837648619483","6334334762051013","6334485477966799","6335596034597586","6335014355397586","14236983863602452","8222283374365041","6335547872573565","6210609025999501","6335880118236974","6335910193819483","6336894813989873","6336869211853702","6336834004510219","6336682286310219","14238101719447627","6210987368842934","6336591881475406","6210944552382391","6336498200387608","6336668994940453","6336400624340453","6336567209740453","6336384269020358","6336502897097984","14237690383666424","6336206651853702","8222198006447067","8222197661647067","6336206420596619","6335576315786053","6335505107106182","8221979991232892","6334122692991427","8222140872601466","6335093512640453","6335601893243299"]
        self.test_init_aliexpress(platformId=45,platform_rma_code_list=platform_rma_code_list)






