
import time
from decimal import Decimal, ROUND_HALF_UP
import pandas as pd
import pymysql
import unittest
from datetime import datetime
import pymongo
from pymongo import MongoClient
import json
import math
from jsonpath import jsonpath
from bson import ObjectId

from pull_order import pull_order,pull_rma_order,pull_order_fee,pull_order_return_fee

class TestMongoDB(unittest.TestCase):
    def setUp(self,env='test'):
        print("当前执行环境 ： ",env)
        self.env = env
        if self.env == 'test':
            self.client = MongoClient(
                "mongodb://smallrig:smallrig@192.168.133.223:27017/?authMechanism=SCRAM-SHA-1&authSource=smallrig&directConnection=true")
            self.db = self.client['smallrig']

            self.urls = 'http://192.168.133.223:5555'
            self.xxl_url = 'http://192.168.133.223:19010'
            self.connection = pymysql.connect(host='192.168.133.213',  # 数据库地址
                                              user='root',  # 数据库用户名
                                              password='root',  # 数据库密码
                                              db='smallrig-platform',
                                              cursorclass = pymysql.cursors.DictCursor)  # 数据库名称
            self.cursor = self.connection.cursor()
        elif self.env == 'uat':
            self.client = MongoClient(
                "mongodb://smallrig:smallrig@192.168.133.233:27017/?authMechanism=DEFAULT&authSource=admin")
            self.db = self.client['smallrig']
            self.urls = 'https://bereal.smallrig.net'
            self.xxl_url = 'http://192.168.133.232:19010'
            self.connection = pymysql.connect(host='192.168.133.233',  # 数据库地址
                                              user='root',  # 数据库用户名
                                              password='Leqi!2022',  # 数据库密码
                                              db='smallrig-platform',
                                              cursorclass = pymysql.cursors.DictCursor)  # 数据库名称
            self.cursor = self.connection.cursor()


    def tearDown(self):
        self.cursor.connection.close()
        self.client.close()  # 关闭 MongoDB 连接

    def query(self, sql):
        self.cursor.execute(sql)
        return self.cursor.fetchall()

    def insert(self, sql):
        try:
            res = self.cursor.execute(sql)
            print(res)
            self.connection.commit()
            return True
        except Exception as e:
            self.connection.rollback()
            return False

    def delete(self, sql):
        return self.insert(sql)

    def update(self, sql):
        return self.insert(sql)


    def test_connection(self):
        self.assertIsNotNone(self.db)



    def handle_objectid(self,data):
        """递归转换 MongoDB 数据，将所有 ObjectId 转化为字符串"""
        if isinstance(data, dict):
            for key, value in data.items():
                data[key] = self.handle_objectid(value)
        elif isinstance(data, list):
            for index, item in enumerate(data):
                data[index] = self.handle_objectid(item)
        elif isinstance(data, ObjectId):
            return str(data)
        return data



    def test_lazada(self ,platformId=39 ,env='test'):
        """
        F1 ERP V6.0.30_20241226
       【订单列表】改造lazada订单确认收入逻辑
        """
        db_list = ["lazada_order_struct"]
        for db in db_list:
            print(
                "-----------------------------------------" + db + "----------------------------------------------" + "\n")
            collection = self.db[db]
            query = {"insertTime": {"$gte": "2024-10-26 00:00:00", "$lte": "2024-12-29 23:59:59"},
                     "platformId": platformId,
                     # "orderId":"933209613936224",
                     "finishFlag": True
                     }

            results = collection.find(query).sort('insertTime', pymongo.DESCENDING)

            for k in results:
                print(k['orderId'])
                print(k['_id'])
                k = self.handle_objectid(k)
                for i in k['orderDetail']['data']:
                    print("sellerSku : ",i['sku'])
                    print("状态       ：",i['status'])
                print("---------------------------------- end ----------------------------------------------------")



    def test_0120(self,platformId = 39,orderId="948903817326330"):

        db_list = ["lazada_order_struct"]
        for db in db_list:
            print(
                "-----------------------------------------" + db + "----------------------------------------------" + "\n")
            collection = self.db[db]
            query = {
                # "insertTime": {"$gte": "2024-10-26 00:00:00", "$lte": "2024-12-29 23:59:59"},
                     "platformId": platformId,
                     "orderId":orderId,
                     "finishFlag": True
                     }

            results = collection.find(query).sort('insertTime', pymongo.DESCENDING)
            k = next(results)

            print(k['orderId'])
            print(k['_id'])
            k = self.handle_objectid(k)
            for i in k['orderDetail']['data']:
                print("sellerSku : ", i['sku'])
                print("状态       ：", i['status'])
            print("---------------------------------- end ----------------------------------------------------")
            pull_order(env=self.env, id=k['_id'], platformId=39)
        rma_order_list = ["778096240269575", "691950744116793", "748872377116197", "777915411669756", "777742648856427", "662671146582859", "749676654364822", "776904569529265", "777596403503654", "692055626892209", "777534069520663", "776749523920663", "748397195721353", "662631533534869", "748278754162521", "776410116932581", "662624128466185", "662457885285051", "662459427626817", "662608723616659", "662603363437329", "662600325492063", "776803479182658", "748007924517671", "662586739434869", "662588308190777", "775878152904858", "702187313666683", "691738811548694", "702585069545542", "702171300145542", "747842712058692", "748868264017567", "662555965668716", "775774553474001", "775773988074001", "662414608585051", "662413060585051", "691411593032455", "702129781133522", "691661639797945", "702107973316943", "776299484186343", "691629449274766", "702068578618289", "747543915921353", "747473184712890", "747439537326758", "662511515795849", "691267129988848", "662364420496059", "691529082674766", "662499992265329", "775116344922062", "662481955568271", "662488918068271", "775751230584414", "702396224346457", "702382860898905", "701951776498905", "701918101570941", "774536138170811", "746876742526758", "662294268679578", "690969394973099", "746687553735026", "747708007198302", "690948912801011", "690928585785624", "774029108039187", "662271210931628", "662260000180526", "662366941544391", "690773781382988", "662225098176516", "773611393348652", "774307441848652", "662216286401047", "662218277171462", "702110415883187", "747201211551500", "774141647778044", "774132695832629", "746173755084035", "747171865751500", "773450901405399", "774109870537947", "746141983836088", "746149564736088", "701668779847494", "701665590783187", "662204213968174", "662344710691128", "662334911078694", "662321773627163", "773893829957745", "773109732090154", "745886540429990", "690863095941627", "662176420005462", "773620643838134", "662293947584350", "690790278328888", "690764894288848", "662162220181910", "690761681588848", "662267739453270", "745617127549337", "746618023449337", "746617820949337", "772665383354238", "662253762620943", "662137415316394", "662122693665901", "746474435211610", "746429222652563", "690663885222625", "746415418247625", "746405624308898", "662246525434577", "662240513499720", "773020064934883", "662105638023101", "662117219935022", "662221314554813", "662104614672452", "662094812857224", "662096409618150", "772669406081261", "701776840216223", "690176901026386", "772445233988588", "660695014354048", "772384448615478", "744810535408898", "662161581539140", "662040014512344", "690283076411933", "771978676896384", "771899830996522", "745582667023635", "689950147598070", "745547471832099", "662020201656786", "771846669452577", "771175115685702", "689951100488848", "701194759816223", "662112527984350", "771654249196384", "661941474580046", "770849774616480", "771370223826298", "770681953103140", "770674307150507", "662071312636217", "662070902536217", "771291244219369", "662065768915424", "662063342497417", "661941430232877", "661949225332877", "662061119315424", "744970219149366", "689653731990683", "662044544791069", "701040354247494", "770404514823855", "770939667652819", "743800784692126", "743787100201176", "662014151454561", "770158561421462", "662008958940041", "770083327487907", "662000789891042", "661990597136043", "770612861050507", "744533812892126", "769890732906648", "661869273810073", "735386572403564", "698150360072856", "734627769262558", "736497883188019", "770228092199345", "769485501614823", "769478729814823", "744088877877169", "661820456934554", "661817699640405", "661817666230664", "661815468730664", "661815075930664", "661814670430664", "661936710740041", "700754503018925", "661894993665493", "661775482412180", "742655307047879", "701057851624209", "768828764682968", "769384057393285", "700653101116223", "661756423378399", "769223832213619", "768623976280979", "742432553387724", "700603785824209", "769148036804359", "661736020340093", "700954460724209", "700556733724209", "661730447307836", "700547903024209", "700544733444599", "661827759524878", "759048732451058", "760437268922949", "768170517182044", "768725675872896", "768158112585267", "661818925592016", "700860642732787", "689042031640511", "768530069440894", "700437317430353", "700421552047494", "768409897314943", "661672466806256", "742674212612804", "661787349880098", "742615478772173", "742615859872173", "768244896834050", "661664808391061", "742564845778496", "741612335736926", "661659469692016", "767583172179017", "661761762058274", "767392139742118", "767949883542118", "767930223408710", "661751910024297", "767847855320185", "767893668536475", "661751900180098", "767836413084493", "759674887666376", "767206106055346", "767701281539452", "767142953439452", "741209723274135", "767699841639452", "767142921439452", "767138782139452", "767703606839452", "767143161839452", "741209521274135", "742142483074135", "742129825054963", "767087760182920", "661583261858459", "767539094640894", "766972748632571", "767474068368181", "700162761351676", "766707318971109", "661559206971310", "766622502480853", "767164053758611", "767071007026485", "767012667026485", "766446710939452", "688170921295206", "766334186444441", "766861063880305", "740488116472041", "700405421509062", "660787797879578", "766113915881603", "661494819916034", "661462636535142", "661448248672003", "758818251645460", "765720548704648", "699885331108881", "766177447522763", "700230296440027", "740769658514708", "766054423062709", "739793118017605", "661391820322622", "699742712835533", "661501546511367", "739554326119577", "740474841619577", "740451045627957", "739494500448987", "661484349538245", "764935798345240", "687693654644985", "764871356328208", "687313922170160", "738974506229990", "739908251429990", "764465390345240", "738945981769080", "764908609779751", "764298341674477", "661288200320116", "661215408052521", "687329400472438", "764121972373047", "699386705234851", "764584488269452", "687229835030186", "661099649798019", "763811318052181", "738372149544225", "764235280474477", "661134133969029", "661021841169029", "686763540336933", "661016843872449", "739008416188217", "661131904011121", "699128151208763", "763725246423447", "660982429996067", "660981234196067", "738589656055968", "660936037343238", "738490205531279", "763275887721941", "762527315992393", "757987923955736", "762976665581697", "762812437437022", "762745669678176", "738017049170552", "660821678482375", "737039757129990", "737939243729990", "761681801394899", "761912335537022", "660883367432339", "736767532200215", "698930288896874", "660781866314426", "698610520996018", "698991220927169", "762013093708734", "760765926656871", "761481776934705", "698074578356066"]



    def test_lazada_rma(self,platformId = 39, platform_rma_code_list = ['767392139742118']):
        out_data_list = []
        for platform_rma_code in platform_rma_code_list:
            db_list = ["return_order_struct"]
            for db in db_list:
                print(
                    "-----------------------------------------" + db + "----------------------------------------------" + "\n")
                collection = self.db[db]
                query = {
                    "platformId": platformId,
                    "orderId": f'{platform_rma_code}',
                    "finishFlag": True
                }

                results = collection.find(query).sort('insertTime', pymongo.DESCENDING)
                try:
                    # 取出最新的一条RMA数据
                    k = next(results)
                    print("退货退款单号： ", k['orderId'], "----", k['_id'])

                    # 获取订单号

                    order_db = "lazada_order_struct"
                    source_code = jsonpath(k, '$.order.trade_order_id')[0]
                    print("平台订单号： ", source_code)
                except KeyboardInterrupt:
                    print("mongo中无该退货退款单数据 ： ", platform_rma_code)
                except StopIteration:
                    print("mongo中无该退货退款单数据 ： ", platform_rma_code)

                try:
                    order_query = {"orderId": f'{source_code}',
                                   "finishFlag": True}
                    collection_order = self.db[order_db]
                    order_result = collection_order.find(order_query).sort('insertTime', pymongo.DESCENDING)
                    order_info = next(order_result)
                    order_id = order_info['_id']

                    # 清洗订单数据 & 售后单
                    pull_order(env=self.env, id=order_id, platformId=platformId)
                    time.sleep(1)
                    # 把订单改成已发货
                    update_order_status_sql = "update t_order_base set order_status = 4 where source_code = '%s'" % \
                                              order_info['orderId']
                    # self.update(update_order_status_sql)
                    # 若退货退款单已存在，则删除重新清洗
                    del_rma_order_sql = 'delete from t_rma_order where platform_rma_code = "%s"' % platform_rma_code
                    self.delete(del_rma_order_sql)
                    pull_rma_order(env=self.env, id=k['_id'], platformId=platformId)

                except UnboundLocalError:
                    print("mongo 中没有订单数据的版本，订单号： ", source_code)
                except StopIteration:
                    print("mongo 中没有订单数据的版本，订单号： ", source_code)


    def test_0120_init(self):
        order_id_list = ["957866994604127","948903817326330","956383108869575","460008439616793","947314405172440","947469121888614","945025417288039","958635262716197","953339797169756","939710777660601","956677239105711","946235233391086","948554549048611","952144972892686","946682685556427","962192787578318","935750805135267","457729082840600","137797158182859","948172019912206","963252387164822","947589864529265","944513759503654","459188206692209","960428530480485","944542720520663","952173646121353","460988782528525","945715440700341","955172025804527","136780654834869","948985896080292","955702100480292","957279529182821","927036411902700","940131071536088","927055963392689","941971939973536","955738020962521","933463047164855","950915729732581","137402148766185","962372380548498","138093543485051","937362026619241","138317758326817","136869689016659","497125061028315","137583975637329","137241522692063","949666934152942","950819638980292","960374581957922","940271813582658","960314902195199","949591387407537","942670881870107","949642112516984","501020377110833","498016215570103","137925955173577","953580427382821","950957878017671","138049329590777","949140115258975","460093948076408","497045627189445","460714755909336","138028146585051","937884805112484","960431746941856","947238349904858","499749383466683","956274701608545","459311943748694","496916663945542","952227560758692","956728982917567","137037595968716","946425595474001","937331055074001","136144105785051","942855055077875","459529129932455","460023171528525","497185806633522","458851791997945","500131533316943","948394715602276","947482619184163","948847025017871","499312349644599","946781334286343","455172498174766","941387293379721","953743958569112","499734374818289","949122277821353","956888906669112","954986173312890","958626716940107","943062720352406","460206525323423","956340365126758","134410237495849","458904371788848","943681316372571","137119523096059","136063223065329","136233023772061","955865546520304","498405198474883","943420767522062","459687336998658","135846341068271","943470987481248","500269505582919","935913422684414","498365790846457","498607371898905","496799430248534","944655957559473","949166469087724","498098793253570","956011323613189","956005161977245","934934252075676","954957732264482","137107986771609","456235674545153","936917504492964","498951927170941","934491547870811","935448890953294","927749064624327","934470991724327","948962584226758","133879645979578","937252789186884","927627033900392","928759636247228","498083163146457","457341732173099","497931132447494","944151050535026","942341449698302","454913748501011","456895935185624","932356963884113","939331977439187","933394705219440","494627099664074","134779270731628","926070384674370","921781690748546","928302808430647","135881517180526","941226663888454","135979986644391","456657315282988","134216620376516","496612774947494","494439930661373","933718764448652","134162297101047","135888519571462","494093660483187","930251389316466","456684113503874","944916778051500","926423264078044","929487015232629","945087971584035","920631649505399","927375006337947","497642709346457","935855969147927","134216241168174","133865200391128","133386457178694","497930304195614","133824493927163","134375608136868","925904814157745","937067881876211","920013865754436","933550112590154","939038055629990","945707111622262","454736145041627","134016886205462","933047344974717","917841510908332","924529859138134","926613007752529","929178108299332","920022812116366","942550723676944","134885141484350","934696090669112","452195272428888","920968671542651","941616391109277","451505627588848","134876346581910","494198032884379","929705389330440","131059686053270","938139478176944","939905138849337","492649809948736","928533912888899","924871490854238","133628243220943","133198051716394","932100202764928","134649194965901","492656002748736","492590895348736","940138793011610","933166053852563","926653354644250","922098104974370","928036970732459","454738726322625","936732561147625","934800365108898","133279207934577","134715364499720","917135514834883","931979072900586","942655746151777","133657562423101","936439028558193","925477729921255","133222610535022","928776196144066","941558353072823","496602329972942","134428515454813","130858859072452","131728205357224","133124208918150","916274674775715","133416498338603","134687985768271","491903000108206","935353050726772","908026620070103","923675313781261","451361806971348","494456507616223","939664918599443","453748316128908","917713930070577","934806815694112","924177523866608","917312655101900","448960852026386","494665147561248","926340984288588","124675535054048","923435172115478","917705353880284","918480822204959","933690315208898","921590510247741","132030459239140","918030269036770","491526686020454","924387054000586","927671457492801","133123544512344","451453966211933","901636292196384","906338490274370","920065390096522","925614886523635","448802079198070","928047011632099","133221539856786","905536088352577","915269214485702","449139888188848","915821061672743","491958476160335","900343034321869","908626710936308","133134750584350","909079761996384","131374196180046","452033910045563","906534890916480","493598340489601","917457390126298","131751624516001","913494462703140","909802220850507","130905204536217","912654056119369","132749570115424","907495804406274","929576134684631","131177861097417","131198668132877","929457353388248","926762181649366","451039366190683","133083516091069","490166487647494","917004393423855","916190711952819","926866343692126","931206765201176","914993128871342","132693904754561","922034481509369","914325796821462","132157321740041","909954668087907","130917237591042","907498266084935","129335080036043","132305356033492","488915636133647","911518356406648","905145837248165","131490356610073","915290790152819","871527725003564","477388508072856","867859504362558","866815425588019","491990727016555","904554489904882","918258433378512","903139020068952","906383808199345","914876248382779","909708565636308","905565252814823","907048877730456","446832451744086","926576784403611","903286410143138","902969098748600","926253309839918","130329259033492","912440619377169","130782022434554","492936925073296","907838541121869","130386823940405","131160537130664","131149974530664","130309833540041","926256912988156","920351206514243","489017027318925","919275297268067","888226669981288","905409583881093","490168798760294","491571121106659","130067054265493","908499304136308","131617903912217","916510895728668","131125591012180","130383841741459","916795617957560","899721223272117","901329277252532","921125749247879","908105988664710","131533127626108","908007936697762","491966522632888","488909540224209","909417171182968","894377602793285","904892734977571","491796338716223","488137813992109","131336918178399","896072660313619","894581153780979","908695881387724","490383146106405","891442213049618","900832720048049","905507150504359","917338563620164","131129702440093","890788684137514","130566755707836","490840176844599","899580863293679","490121112597809","912138429152293","897270237888858","897437819342208","895898903436829","131119579424878","848920285851058","851974881522949","892885244482044","904254927972896","898054072785267","915974509871822","129292006792016","487462238932787","440654405740511","487075652051672","892153512340894","490229748830353","445773705384174","490126393947494","910034486948561","895129837342913","903249392514943","130546997406256","895926873938705","908555029812804","894956495564650","898637793124461","129303434080098","913609914772173","894131859934050","130445373591061","907117804978496","906946893136926","898817730979017","488895992228814","895981583779323","129231432258274","910730591344505","890501466142118","892766460508710","910722599636577","907581283548933","130390535924297","891962676620185","892265200436475","899150980368282","130414935280098","892233294884493","897876564988384","487003440330353","851967501266376","898015790255346","888329282439452","901744601874135","884985692239452","905141630054963","890481809682920","488901108908081","129816111858459","893210309132571","896162176568181","896762585960849","486551915251676","887916054471109","885710001544645","128131222471310","887602485780853","482495227351303","873802262996817","882712347920243","879178759972446","883124704279011","877855653479011","875684438873230","487075598697733","882900517641124","437302284476070","893284187958611","878024496226485","891332113628482","443265112895206","888405333236829","893054151844441","886718293704535","892471385580305","900057261472041","882416712811331","129404508885051","487835560309062","123456234479578","883535104181603","487299737254677","484005640521411","127954688616034","484350660281680","890954184086987","484055849146357","486588343588640","127724298635142","878424662122087","899969702156241","900187577359548","127407694772003","887270502241848","127616257644043","893076668856241","847834990845460","882012492404648","483758092408881","881015141136079","875926840922763","881869235213442","483792623040027","884268105973230","900781381914708","879217621862709","895225837517605","877601603040475","439242268410685","902546790893846","441707556710685","127144446122622","486292522235533","125478039511367","898451543219577","484079661049796","897046500419577","888576076827957","901104749248987","127163800338245","896174158012503","875075239177571","882737156245240","440181525244985","486589922036775","872420749728208","899847104443404","883955937691864","882795720666278","437149034170160","896448978704683","482444021048612","890253890829990","872514433445240","895507320469080","872541292879751","482113122973779","483378741499091","878876286400879","881508206561974","481028981352746","481888711414135","478474831915129","876443566174477","126424667720116","872215912497747","867472571596817","869983730980792","861642412204265","873656134781843","874052717730824","853406277363794","863401228548288","864805711495274","862184040648367","865230826395274","866844124672446","871260111633653","868033980335711","872839933330824","861464463896817","866361713620165","862734640952117","865262506264363","126511872452521","890785670057220","438948741272438","892980560685161","436575404716164","879091531273047","485826745676028","480336006734851","879872955669452","439110750930186","874751743332300","126029637698019","481094441140176","483952326840176","878139387452181","892442589944225","479826046208679","126124612750011","126978503869029","435465889236933","125590547772449","878030232288217","125738664411121","889412318400250","891456711312379","480801874108763","872099112923447","874758349316522","434351279892395","873597355723247","867446890612029","888011587073144","888039112386202","862581875966111","886685363389179","126760940396067","876780401955968","126440731143238","881518428431279","862556243521941","864045488192393","834575028555736","868099584681697","849508636437022","868717944778176","876481855070552","125778517682375","882787136329990","854930604094899","126082753661763","883920313940252","124843894287232","124424815932339","876350841500215","481186371796874","125615769014426","481499706296018","479578381127169","852623494097926","854451106384246","843070003430824","849511207984167","877590948064007","837653214292904","870237150013793","848827250355055","479895976632247","857915168829899","115278642666222","855143572384094","874512995000159","480374779717046","477465006860388","846998142900114","840294423529523","480729140358450","837302060466082","848906048759937","858767539630824","477147747869094","478010975616963","876364118976796","846829946593437","844851938717049","860282415408734","876747184551667","845619407920485","843787426578296","864620405320791","854027655456871","851263932134705","475453805756066"]
        for orderId in order_id_list:
            self.test_0120(platformId=39,orderId=orderId)