import pymysql

from logs.log import logger
import unittest
import json
import jsonpath
# from jsonpath_ng import jsonpath, parse
class DatabaseComparisonTestCase(unittest.TestCase):

    def setUp(self):
        # 连接数据库1 --冷库
        self.conn = pymysql.connect(
            host='192.168.133.233',
            # host='192.168.133.213',
            user='root',
            password='Leqi!2022',
            # password='root',
            db='smallrig-platform'
        )


    def tearDown(self):
        # 关闭数据库连接
        import time
        time.sleep(5)
        self.conn.close()

    def test_data_comparison(self):
        # 执行数据库1的查询
        cursor = self.conn.cursor()

        SQL= """
        select a.warehouse_id,a.market_id,a.channel_id ,b.product_code ,c.mc_name, stock_in_num 备货在途 ,procurement_in_num 采购在途 , pend_num 已收货待入库数量,head_in_num 在途数量,product_num 在库可用数量
        from t_product_inventory a  left join t_product b  on a.product_id = b.id  left join t_market_channel c on a.channel_id =c.id
        where
        a.del_flag = 1
        and a.warehouse_id = 57
        and (a.market_id = 91 or a.market_id = 9)
        # and a.channel_id = 159
        and b.product_code in ("001.001.1329-1","001.002.0041-1","001.002.0061-1","001.005.0033-1","001.010.0033-1","001.015.0006-1","002-01500-0000-002","002-01500-0000-004","002-01500-0000-006","002-01500-0000-008","002-01500-0000-010","002-01500-0000-012","002-01500-0000-014","002-01500-0000-016","002-01500-0000-018","002-01500-0000-020","002-01500-0000-022","002-01500-0000-024","002-01500-0000-026","002-01500-0000-028","002-01500-0000-030","002-01500-0000-032","002-01500-0000-034","002-01500-0000-036","002-01500-0000-038","002-01500-0000-040","002-01500-0000-042","002-01500-0000-046","002-01500-0000-051","002-01500-0000-053","002-01500-0000-055","002-01500-0000-057","002-01500-0000-059","002-01500-0000-061","002-01500-0000-064","002-01500-0000-066","002-01500-0000-073","002-01500-0000-075","002-01500-0000-078","070-3018A-M111-000","84-1008-A","114A001","114A003","114A006","114AA001","114AA002","115A001","115A003","115A006","116A001","116A003","117A001","117A003","118A001","118A003","123AA","192-168-133-223-TEST-CESHI","742","761","771","772","796","800","814","838","842","851","851-A","856","857","860B","862","870","888","891","892","893","900","914","915","922","942","943","960","964","971","973B","975","976","980","998C","1006","1013","1029","1050","1050-A","1052","1052-A","1060","1061","1063","1065","1074","1074B","1078","1084","1093","1094","1097","1111","1112","1116","1117","1119","1124-M","1124AA04","1124AA05","1124B","1124B-M","1124B-O","1125","1125-A009","1125-A012","1125-B001","1125-B003","1125-B006","1125A001","1125A003","1125A006","1125A007","1125A009","1125A012","1129","1129-D","1129-L","1129-M","1129-O","1132","1136","1150","1154","1158","1160","1162","1165","1168","1173","1175","1178","1181","1186","1187","1189","1191","1195","1203","1208","1221","1223","1225","1227","1228","1230-001","1230-003","1230-006","1232","1234-A","1239","1241","1242","1245","1246","1250","1253","1256","1257","1261","1263","1264","1265","1266","1268","1270","1272","1274","1279","1280","1280B","1283","1286","1289","1292","1294","1296","1298","1400","1402","1408","1409","1410","1415","1417","1419","1421","1423","1426","1429","1433","1436","1439","1443","1446","1448","1450","1451","1453","1456","1460","1461","1462","1466","1468","1471","1473","1476","1479","1481","1483","1487","1493","1495","1497B","1498","1499","1503","1505","1506","1508","1511","1515","1516","1518","1520","1523","1527","1528","1530","1533","1534","1534B","1540","1546","1550","1553","1555","1557","1559","1563","1565-A","1566","1569","1571","1572","1574","1576","1577","1579","1581","1583","1583B","1584","1586","1589","1592","1593","1597","1600","1605","1609","1611","1612","1615","1616","1617","1621","1623","1626","1626B","1630","1631","1632","1633","1638","1639","1643","1646","1647","1649","1651","1652","1654","1656","1659","1661","1663","1665","1669B","1670","1673","1675","1682","1682B","1683","1684C","1685","1686B","1687","1688","1696","1698","1700","1702","1703","1703B","1704","1706","1708","1709","1713","1714","1716","1718","1720","1721","1722","1725","1727","1731","1734","1735","1736","1737","1741","1742","1743","1745","1747","1750","1751","1752","1754","1755","1756","1757","1760","1761","1763","1764","1764B","1765","1767","1769","1775-D","1775-L","1775-M","1775-O","1777","1779","1781","1789","1793","1796","1797","1800","1802","1805","1807B","1810","1810C","1813","1815B","1818","1823","1824","1825","1827","1828","1830","1831","1833","1837","1838","1840","1841","1842","1845","1846","1847","1852","1854","1855","1858","1859","1862","1864B","1868","1872","1876","1877","1878","1879","1880","1881","1881B","1886","1887B","1888","1896","1897B","1898","1898C","1899","1901","1902","1902B","1902C","1903C","1907","1908","1919","1920","1922","1925","1926","1926B","1931","1936","1938","1938B","1939B","1940","1941","1941B","1943","1947","1949","1950B","1952","1954","1954B","1955","1960","1962","1968","1968B","1968D","1970","1974","1978","1980","1980B","1982","1983B","1984","1986","1986B","1986C","1988","1990","1991","1992","1993","1995","1997","2000","2001","2002","2002B","2002C","2002F","2005","2007","2007B","2008","2010B","2011","2013","2014B","2022","2024","2026","2027","2029","2030B","2033","2034","2035","2038","2043","2044B","2045B","2045C","2045D","2046","2052","2052B","2055","2058","2060","2062B","2064","2065","2068B","2069","2071","2073","2074","2075","2083B","2083C","2083D","2086","2087","2092B","2093B","2094","2095","2096B","2096C","2096D","2096E","2097","2097B","2097C","2099","2101","2103","2103B","2104","2105","2108","2108B","2110","2113","2114B","2115","2115B","2117","2117C","2118","2119","2122","2122B","2122D","2123","2125","2125B","2127","2129","2129B","2131","2132","2133","2134B","2135","2137B","2139","2143","2143B","2145B","2147B","2150","2151","2154B","2155","2155B","2156","2158","2161","2165B","2166","2168B","2168C","2170","2172","2174B","2175","2176","2177","2178B","2179","2186B","2187","2194","2195","2201","2202B","2203","2203B","2205","2207","2208","2211","2212","2212B","2212C","2214B","2215","2218","2219","2221","2221B","2222","2225","2228","2228B","2230","2231","2234B","2235","2240","2243","2243B","2244","2245","2246","2251","2660","2663","2725","2725B","2727","2760B","2762","2763","2765","2766","2767","2769","2770","2774","2776","2778","2786","2786B","2793","2794","2798","2814","2821B","2824","2826","2828","2831","2832","2835","2836","2837","2839","2844","2850","2853","2854","2857B","2858","2859","2863","2864","2866","2869","2871","2873","2875","2877","2878","2880","2880B","2881","2885","2886","2887","2889","2894","2900","2902","2903","2905","2905B","2914","2918","2919","2923","2930","2933","2935","2935AC","2935ACD","2935ACD1","2935C","2936","2938","2939","2947","2948","2950","2970","2972","2978","2982","2982B","2984","2988","2990","2994","2996","2998","2999B","3000","3004","3004B","3007","3008","3008B","3010","3016","3025","3026","3028","3031","3031B","3034","3035","3041","3043","3045","3048","3051","3056","3059","3065","3065B","3067","3074","3075B","3077","3080","3082","3086","3088","3089","3098","3100","3102","3108","3115","3117","3119","3123","3129","3131","3133","3135","3137","3137B","3139","3140B","3141","3143","3144","3146","3148","3150","3152","3155","3157","3161","3164","3166","3169","3175","3178","3181","3181B","3182","3185","3190","3192","3193","3195","3196","3197","3198","3200","3202","3204","3207","3209","3210","3211","3213","3215","3217","3219","3221","3224","3227","3230","3232","3233","3238","3242","3246","3248","3252","3254","3256","3258","3261","3265","3270B","3271","3273","3276","3278","3282","3287","3291","3293","3295","3297","3299B","3301","3302","3302-D","3302-L","3302-M","3302-O","3304","3308","3310","3322","3327","3329","3357","3358","3375","3375B","3382","3383","3385","3386","3387","3389","3390","3392","3400","3404","3406","3406B","3407","3408","3410","3411","3422","3424","3426","3427B","3428","3430","3432","3433","3435","3437","3446","3447","3448","3450","3452","3467","3474","3474B","3474C","3482","3483","3492","3499","3501","3510","3513","3534","3562","3563","3578","3586","3639","3660","3667","3674","3694","3711","3714","3751","3752","3754","3764","3765","3791","3827","3919","3991","3994","4084","4086","4087","4107","4195","4196","4294","12333","18888","90997B","101241","101243","101245","101246","101248","202313-001","230221-001","230221-003","230221-004","230221-00411","230221-00422","230221-006","312313","336699","1012410","1213234","1501800(EM100)","1501800(EM102)","1501801","A0207-001","a1125","AA9909","AA9909-D","AA9909-M","AA9909-O","AAAA","AAC2301","AAK2213","AAK2371","AAK2495","AAK2651","AAL2289","AAL2291","AAL2293","AAW2284","ABCDEFGHIJKLMNOPQRST","ABL2325","APB2673","APL2253","APL2257","APL2278","APL2311","APL2331B","APL2341","APL2349","APL2350","APL2357","APS2295","APT2671","APU2364","APU2389","BM0003","BM0005","BM0006","BQZ001","BQZ010","BQZ012","BQZ013","BQZ015","BQZ016","BQZ017","BQZ019","BQZ021","BQZ023","BS003","BS004","BS009","BS011","BSA2696","BSC2259","BSC2390","BSE2256B","BSE2294","BSE2346B","BSE2348","BSE2385","BSL2361","BSL2644","BSL2680")
        and b.product_code = '001.001.1329-1'
        """
        # 执行SQL查询
        cursor.execute(SQL)

        # 获取所有字段(column)的名称
        column_names = [i[0] for i in cursor.description]

        # 获取所有数据
        rows = cursor.fetchall()

        results = []
        for row in rows:
            # 将每一行的数据与对应的字段名称进行绑定，形成一个字典，然后添加到结果列表中
            results.append(dict(zip(column_names, row)))

        # 打印包含字段名称的结果
        for result in results:
            print(result)


    def test_lq_sku_comparison(self,warehouse_id=57,market_id=10,channel_id=0,product_code='1053',type="备货在途"):
        # 执行数据库的查询
        cursor = self.conn.cursor()
        #乐其库存查询
        SQL= f"""
        select a.warehouse_id,a.market_id,a.channel_id ,b.product_code ,c.mc_name, stock_in_num 备货在途 ,procurement_in_num 采购在途 , pend_num 已收货待入库数量,head_in_num 在途数量,product_num 在库可用数量
        from t_product_inventory a  left join t_product b  on a.product_id = b.id  left join t_market_channel c on a.channel_id =c.id
        where
        a.del_flag = 1
        and a.warehouse_id = {warehouse_id}
        and a.market_id = {market_id} 
        and a.channel_id = {channel_id}
        and b.product_code = '{product_code}'
        """
        # 执行SQL查询
        cursor.execute(SQL)

        # 获取所有字段(column)的名称
        column_names = [i[0] for i in cursor.description]

        # 获取所有数据
        rows = cursor.fetchall()

        results = []
        for row in rows:
            # 将每一行的数据与对应的字段名称进行绑定，形成一个字典，然后添加到结果列表中
            results.append(dict(zip(column_names, row)))

        # 打印包含字段名称的结果
        for result in results:
            # print(result)
            # print(result['备货在途'])
            if type =='备货在途':
                return result['备货在途']
            if type =="采购在途":
                return result['采购在途']


    def test_beihuo_sku_comparison(self,warehouse_id=57,market_id=10,channel_id=0,product_code='1053'):
        # 执行数据库的查询
        cursor = self.conn.cursor()
        #查询备货计划商品表
        SQL= f"""
        SELECT DISTINCT b.product_code
        FROM t_stock_plan a
        RIGHT JOIN t_stock_plan_detail b ON a.id = b.stock_plan_id
        """
        # 执行SQL查询
        cursor.execute(SQL)

        # 获取所有字段(column)的名称
        column_names = [i[0] for i in cursor.description]

        # 获取所有数据
        rows = cursor.fetchall()

        results = []
        for row in rows:
            # 将每一行的数据与对应的字段名称进行绑定，形成一个字典，然后添加到结果列表中
            results.append(dict(zip(column_names, row)))
        a=1
        # 打印包含字段名称的结果
        for result in results:
            # print(result)
            sql =  f"""
                    SELECT a.warehouse_id, a.market_id, COALESCE(a.channel_id, '') AS channel_id, SUM(b.need_num - b.received_quantity) AS total_difference
                    FROM t_stock_plan a
                    RIGHT JOIN t_stock_plan_detail b ON a.id = b.stock_plan_id
                    WHERE 
                    a.status=2 and b.del_flag=1 AND a.del_flag=1 AND b.sku_status=0 AND b.product_code="{result['product_code']}"
                    GROUP BY a.warehouse_id, a.market_id, COALESCE(a.channel_id, '')
                    """
            cursor.execute(sql)
            column_names = [i[0] for i in cursor.description]
            rows = cursor.fetchall()
            tmp_list = []
            for row in rows:
                # 将每一行的数据与对应的字段名称进行绑定，形成一个字典，然后添加到结果列表中
                tmp_list.append(dict(zip(column_names, row)))
            for tmp in tmp_list:
                # print(tmp)
                s=self.test_lq_sku_comparison(warehouse_id=tmp['warehouse_id'], market_id=tmp['market_id'],
                                            channel_id=tmp['channel_id'], product_code=result['product_code'])

                if s != tmp['total_difference'] :
                    print(result)
                    # print(result['product_code'])
                    print("乐其库存备货在途数量："+str(s),"备货计划表："+str(tmp['total_difference']))
                else:
                    # print(result,"--------------------------succes")
                    print(a)
                    a=a+1





    def test_xq_sku_comparison(self,warehouse_id=57,market_id=10,channel_id=0,product_code='1053'):
        # 执行数据库的查询
        cursor = self.conn.cursor()
        #查询需求计划商品表
        SQL= f"""
        SELECT DISTINCT product_code
        FROM t_purchase_product_item
        """
        # 执行SQL查询
        cursor.execute(SQL)

        # 获取所有字段(column)的名称
        column_names = [i[0] for i in cursor.description]

        # 获取所有数据
        rows = cursor.fetchall()

        results = []
        for row in rows:
            # 将每一行的数据与对应的字段名称进行绑定，形成一个字典，然后添加到结果列表中
            results.append(dict(zip(column_names, row)))
        a = 1
        # 打印包含字段名称的结果
        for result in results:
            # print(result)
            sql =  f"""
                    
                    SELECT a.purchase_sn,a.product_code,SUM(a.purchase_quantity-a.quantity_received+a.return_quantity) AS sum_xq FROM t_purchase_product_item a LEFT JOIN t_purchase_product b ON a.purchase_product_id=b.id LEFT JOIN t_purchase c ON b.purchase_id=c.id
                    WHERE a.STATUS=0 AND a.del_flag=1  AND c.status =3  AND a.product_code="{result['product_code']}" GROUP BY product_code
        
                    """
            cursor.execute(sql)
            column_names = [i[0] for i in cursor.description]
            rows = cursor.fetchall()
            tmp_list = []
            for row in rows:
                # 将每一行的数据与对应的字段名称进行绑定，形成一个字典，然后添加到结果列表中
                tmp_list.append(dict(zip(column_names, row)))

            for tmp in tmp_list:

                # print(tmp['purchase_sn'])

                # print(tmp['sum_xq'])
                s=self.test_lq_sku_comparison(warehouse_id=57, market_id=91,
                                            channel_id=0, product_code=tmp['product_code'],type="采购在途")

                if s != tmp['sum_xq'] :
                    # print(tmp)
                    # print(tmp['product_code'])
                    # print(result['product_code'])
                    print("sku :"+str(tmp['product_code'])+" 乐其库存采购在途数量："+str(s),"采购单表："+str(tmp['sum_xq']))

                else:
                    # print(tmp,"----------------------------------------------sucess")
                    print(a)
                    a=a+1



